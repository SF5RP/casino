import { useEffect, useRef, useState, useCallback } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { WEBSOCKET_URL, WS_CONFIG } from '../../../config/websocket';
import { rouletteApi } from '../../../lib/api/rouletteApi';
import type { RouletteNumber } from '../types/rouletteTypes';

export function useRouletteWebSocket(key: string | undefined, token?: string) {
  const [history, setHistory] = useState<RouletteNumber[]>([]);
  const [isConnected, setIsConnected] = useState(false);
  const [isReconnecting, setIsReconnecting] = useState(false);
  const [reconnectAttempts, setReconnectAttempts] = useState(0);
  const [needsAuth, setNeedsAuth] = useState(false);
  const [authError, setAuthError] = useState<string | null>(null);
  const wsRef = useRef<WebSocket | null>(null);
  const sendTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const shouldReconnectRef = useRef(true);
  const tokenRef = useRef(token);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    tokenRef.current = token;
  }, [token]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket
  const connectWebSocket = useCallback(() => {
    if (!key || !shouldReconnectRef.current) return;

    try {
      console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...', WEBSOCKET_URL);
      const ws = new WebSocket(WEBSOCKET_URL);
      wsRef.current = ws;

      ws.onopen = () => {
        console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
        setIsConnected(true);
        setIsReconnecting(false);
        setReconnectAttempts(0);
        setNeedsAuth(false);
        setAuthError(null);
        ws.send(JSON.stringify({ type: 'join', key, token: tokenRef.current }));
      };

      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          
          if (data.type === 'sync' && Array.isArray(data.history)) {
            setHistory(data.history);
          } else if (data.type === 'authRequired') {
            console.warn('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏:', data.key);
            setNeedsAuth(true);
            setAuthError(data.error || '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω');
            setIsConnected(false);
          } else if (data.type === 'error') {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data.error);
            setAuthError(data.error);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      };

      ws.onclose = (event) => {
        console.log('üîå WebSocket –∑–∞–∫—Ä—ã—Ç:', event.code, event.reason);
        setIsConnected(false);
        
        // –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        if (shouldReconnectRef.current && event.code !== 1000) {
          handleReconnect();
        }
      };

      ws.onerror = (error) => {
        console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
        setIsConnected(false);
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
      if (shouldReconnectRef.current) {
        handleReconnect();
      }
    }
  }, [key]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const handleReconnect = useCallback(() => {
    if (!shouldReconnectRef.current) return;

    const baseDelay = WS_CONFIG.CONNECTION_OPTIONS.retryInterval;

    setIsReconnecting(true);
    setReconnectAttempts(prev => prev + 1);

    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –º–∞–∫—Å–∏–º—É–º–æ–º 30 —Å–µ–∫—É–Ω–¥: 2s, 4s, 8s, 16s, 30s, 30s, ...
    const delay = Math.min(baseDelay * Math.pow(2, reconnectAttempts), 30000);
    
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts + 1} —á–µ—Ä–µ–∑ ${delay}ms`);

    reconnectTimeoutRef.current = setTimeout(() => {
      connectWebSocket();
    }, delay);
  }, [reconnectAttempts, connectWebSocket]);

  // –û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  useEffect(() => {
    if (!key) return;

    shouldReconnectRef.current = true;
    connectWebSocket();

    return () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      shouldReconnectRef.current = false;
      
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
        reconnectTimeoutRef.current = null;
      }
      
      if (sendTimeoutRef.current) {
        clearTimeout(sendTimeoutRef.current);
        sendTimeoutRef.current = null;
      }
      
      if (wsRef.current) {
        wsRef.current.close(1000, 'Component unmounting');
        wsRef.current = null;
      }
      
      setIsConnected(false);
      setIsReconnecting(false);
      setReconnectAttempts(0);
    };
  }, [key, connectWebSocket]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
  const sendHistory = useCallback((newHistory: RouletteNumber[] | ((prev: RouletteNumber[]) => RouletteNumber[])) => {
    console.time('sendHistory');
    console.log('üöÄ –ù–∞—á–∞–ª–æ sendHistory, —Ç–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è:', history.length);
    
    const startTime = performance.now();
    const updatedHistory = typeof newHistory === 'function' ? newHistory(history) : newHistory;
    const historyCalcTime = performance.now();
    console.log(`üìä –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏: ${(historyCalcTime - startTime).toFixed(2)}ms`);
    
    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º UI (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    setHistory(updatedHistory);
    const setHistoryTime = performance.now();
    console.log(`üíæ setHistory: ${(setHistoryTime - historyCalcTime).toFixed(2)}ms`);
    
    // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI)
    if (sendTimeoutRef.current) {
      clearTimeout(sendTimeoutRef.current);
    }
    
    sendTimeoutRef.current = setTimeout(() => {
      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN && key) {
        const wsStartTime = performance.now();
        wsRef.current.send(JSON.stringify({ 
          type: 'update', 
          key, 
          token: tokenRef.current,
          history: updatedHistory 
        }));
        const wsEndTime = performance.now();
        console.log(`üåê WebSocket send (async): ${(wsEndTime - wsStartTime).toFixed(2)}ms`);
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', updatedHistory.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      } else {
        console.log('‚ùå WebSocket –Ω–µ –≥–æ—Ç–æ–≤:', {
          wsReady: wsRef.current?.readyState === WebSocket.OPEN,
          hasKey: !!key,
          readyState: wsRef.current?.readyState
        });
      }
      sendTimeoutRef.current = null;
    }, 10); // 10ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –∫–ª–∏–∫–æ–≤
    
    console.timeEnd('sendHistory');
  }, [key, history]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const forceReconnect = useCallback(() => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
    shouldReconnectRef.current = true;
    setReconnectAttempts(0);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (wsRef.current) {
      wsRef.current.close(1000, 'Manual reconnect');
      wsRef.current = null;
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ
    setIsReconnecting(true);
    setTimeout(() => {
      connectWebSocket();
    }, 100);
  }, [connectWebSocket]);

  // –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –Ω–æ —Ö—É–∫ –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è!
  if (!key) {
    return { 
      history: [], 
      setHistory: () => {}, 
      isConnected: false, 
      isReconnecting: false, 
      reconnectAttempts: 0,
      needsAuth: false,
      authError: null,
      forceReconnect: () => {}
    };
  }

  return { 
    history, 
    setHistory: sendHistory, 
    isConnected, 
    isReconnecting, 
    reconnectAttempts,
    needsAuth,
    authError,
    forceReconnect
  };
}

export function useSaveRouletteHistory() {
  return useMutation({
    mutationFn: async (data: { key: string; number: RouletteNumber }) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Go backend API
      const session = await rouletteApi.saveNumber(data.key, data.number);
      return { key: data.key, session };
    },
  });
}

export function useFetchRouletteHistory(key: string | undefined) {
  return useQuery({
    queryKey: ['roulette-history', key],
    queryFn: async () => {
      if (!key) throw new Error('–ù–µ—Ç –∫–ª—é—á–∞');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Go backend API
      const history = await rouletteApi.getHistory(key);
      return { history };
    },
    enabled: !!key,
    refetchInterval: key ? 5000 : false,
  });
}

export function usePatchRouletteHistory(key: string | undefined) {
  return useMutation({
    mutationFn: async (history: RouletteNumber[]) => {
      if (!key) throw new Error('–ù–µ—Ç –∫–ª—é—á–∞');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Go backend API
      const session = await rouletteApi.updateHistory(key, history);
      return session;
    },
  });
} 