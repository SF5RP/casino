name: Build and Deploy Casino Backend

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  GO_VERSION: '1.22'
  BINARY_NAME: 'casino-server'

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Build binary
      working-directory: backend
      run: |
        go mod download
        go mod tidy
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o ${{ env.BINARY_NAME }} ./cmd/server/main.go
        
    - name: Run tests
      working-directory: backend
      run: go test ./...
      
    - name: Prepare deployment files
      working-directory: backend
      run: |
        mkdir deploy_package
        cp -v ${{ env.BINARY_NAME }} deploy_package/
        cp -v env.example deploy_package/
        cp -v DEPLOYMENT.md deploy_package/
        cp -v README.md deploy_package/
        
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: 'just-a-placeholder'
        
    - name: Deploy and restart service
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "üìç Server: ${{ secrets.SERVER_HOST }}"
        echo "üë§ User: ${{ secrets.SERVER_USER }}"
        echo "üåø Branch: ${{ github.ref_name }}"
        echo "üìù Commit: ${{ github.sha }}"
        
        # Copy files with temporary names
        scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT || '22' }} \
            backend/deploy_package/${{ env.BINARY_NAME }} \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USER }}/casino-backend/${{ env.BINARY_NAME }}.tmp
        scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT || '22' }} \
            backend/deploy_package/env.example \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USER }}/casino-backend/env.example.tmp
        scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT || '22' }} \
            backend/deploy_package/DEPLOYMENT.md \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USER }}/casino-backend/DEPLOYMENT.md.tmp
        scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT || '22' }} \
            backend/deploy_package/README.md \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USER }}/casino-backend/README.md.tmp
            
        # Execute deployment commands on server
        ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || '22' }} \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
        set -e

        echo "üîÑ Stopping casino-backend service..."
        sudo systemctl stop casino-backend.service || true

        echo "üì¶ Replacing files atomically..."
        mv -f /home/${{ secrets.SERVER_USER }}/casino-backend/${{ env.BINARY_NAME }}.tmp /home/${{ secrets.SERVER_USER }}/casino-backend/${{ env.BINARY_NAME }}
        mv -f /home/${{ secrets.SERVER_USER }}/casino-backend/env.example.tmp /home/${{ secrets.SERVER_USER }}/casino-backend/env.example
        mv -f /home/${{ secrets.SERVER_USER }}/casino-backend/DEPLOYMENT.md.tmp /home/${{ secrets.SERVER_USER }}/casino-backend/DEPLOYMENT.md
        mv -f /home/${{ secrets.SERVER_USER }}/casino-backend/README.md.tmp /home/${{ secrets.SERVER_USER }}/casino-backend/README.md

        echo "üîê Setting permissions..."
        chmod +x /home/${{ secrets.SERVER_USER }}/casino-backend/${{ env.BINARY_NAME }}

        echo "üöÄ Starting casino-backend service..."
        sudo systemctl start casino-backend.service

        echo "‚úÖ Verifying deployment..."
        sleep 5
        if sudo systemctl is-active --quiet casino-backend; then
          echo "‚úÖ Deployment successful!"
          sudo systemctl status casino-backend --no-pager
        else
          echo "‚ùå Deployment failed!"
          sudo journalctl -u casino-backend -n 20 --no-pager
          exit 1
        fi
        EOF
        
    - name: Health check
      run: |
        echo "üè• Running health check..."
        sleep 10
        
        if curl -f http://${{ secrets.SERVER_HOST }}:8080/health; then
          echo "‚úÖ Health check passed!"
        else
          echo "‚ùå Health check failed!"
          exit 1
        fi
        
    - name: Deployment summary
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üöÄ Deployment completed successfully!"
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: production" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "üí• Deployment failed!"
          echo "## üí• Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: production" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
        fi 