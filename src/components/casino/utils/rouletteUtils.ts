import { RED_NUMBERS, BLACK_NUMBERS } from '../constants/rouletteConstants';
import type { RouletteNumber, RepeatSeries, AgeMap } from '../types/rouletteTypes';

export function getContrastText(bgColor: string): string {
  // –£–¥–∞–ª—è–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
  if (bgColor.startsWith('#')) bgColor = bgColor.slice(1);
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ rgb
  let r = 0, g = 0, b = 0;
  if (bgColor.length === 3) {
    r = parseInt(bgColor[0] + bgColor[0], 16);
    g = parseInt(bgColor[1] + bgColor[1], 16);
    b = parseInt(bgColor[2] + bgColor[2], 16);
  } else if (bgColor.length === 6) {
    r = parseInt(bgColor.slice(0, 2), 16);
    g = parseInt(bgColor.slice(2, 4), 16);
    b = parseInt(bgColor.slice(4, 6), 16);
  }
  // –Ø—Ä–∫–æ—Å—Ç—å –ø–æ —Ñ–æ—Ä–º—É–ª–µ WCAG
  const brightness = (r * 299 + g * 587 + b * 114) / 1000;
  return brightness > 140 ? '#222' : '#fff';
}

export function getNumberColor(num: RouletteNumber): string {
  if (num === 0 || num === '00') return '#52b788'; // –±–æ–ª–µ–µ –±–ª–µ–¥–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π –¥–ª—è 0 –∏ 00
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const numValue = typeof num === 'string' ? parseInt(num, 10) : num;
  
  if (!isNaN(numValue) && RED_NUMBERS.has(numValue)) return '#e74c3c'; // –∫—Ä–∞—Å–Ω—ã–π
  if (!isNaN(numValue) && BLACK_NUMBERS.has(numValue)) return '#2c3e50'; // —á–µ—Ä–Ω—ã–π
  
  return '#52b788'; // –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
}

export function calculateAgeMap(history: RouletteNumber[]): AgeMap {
  const DEBUG_LOGS = process.env.NODE_ENV === 'development';
  
  if (DEBUG_LOGS) {
    console.log(`üó∫Ô∏è –†–∞—Å—á–µ—Ç AgeMap –¥–ª—è ${history.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏`);
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤–æ–∑—Ä–∞—Å—Ç–æ–º
  const ageMap: AgeMap = {};
  for (let i = 0; i <= 36; i++) {
    ageMap[String(i)] = history.length;
  }
  ageMap['00'] = history.length;
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º –∏—Å—Ç–æ—Ä–∏—é –æ–¥–∏–Ω —Ä–∞–∑ —Å –∫–æ–Ω—Ü–∞, –æ–±–Ω–æ–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞
  for (let i = history.length - 1; i >= 0; i--) {
    const num = String(history[i]);
    if (ageMap[num] === history.length) { // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
      ageMap[num] = history.length - 1 - i;
    }
  }
  
  if (DEBUG_LOGS) {
    console.log(`‚úÖ AgeMap –≥–æ—Ç–æ–≤ (${Object.keys(ageMap).length} —á–∏—Å–µ–ª)`);
  }
  return ageMap;
}

// –ö—ç—à –¥–ª—è —Ü–≤–µ—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
const progressColorCache = new Map<number, string>();

export function getProgressColor(count: number): string {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (progressColorCache.has(count)) {
    return progressColorCache.get(count)!;
  }
  
  // –ü–ª–∞–≤–Ω–∞—è –≥—Ä–∞–¥–∞—Ü–∏—è –æ—Ç –∑–µ–ª–µ–Ω–æ–≥–æ —á–µ—Ä–µ–∑ –∂–µ–ª—Ç—ã–π –∫ –æ—Ä–∞–Ω–∂–µ–≤–æ–º—É
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1 –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-100
  const normalizedCount = Math.min(count / 100, 1);
  
  let color: string;
  
  if (normalizedCount <= 0.2) {
    // 0-20: –ó–µ–ª–µ–Ω—ã–π
    color = '#22c55e';
  } else if (normalizedCount <= 0.4) {
    // 20-40: –ó–µ–ª–µ–Ω—ã–π ‚Üí –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
    const progress = (normalizedCount - 0.2) / 0.2;
    color = interpolateColor('#22c55e', '#84cc16', progress);
  } else if (normalizedCount <= 0.6) {
    // 40-60: –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π ‚Üí –ñ–µ–ª—Ç–æ-–∑–µ–ª–µ–Ω—ã–π
    const progress = (normalizedCount - 0.4) / 0.2;
    color = interpolateColor('#84cc16', '#eab308', progress);
  } else if (normalizedCount <= 0.8) {
    // 60-80: –ñ–µ–ª—Ç–æ-–∑–µ–ª–µ–Ω—ã–π ‚Üí –ñ–µ–ª—Ç—ã–π
    const progress = (normalizedCount - 0.6) / 0.2;
    color = interpolateColor('#eab308', '#f59e0b', progress);
  } else {
    // 80-100: –ñ–µ–ª—Ç—ã–π ‚Üí –û—Ä–∞–Ω–∂–µ–≤—ã–π
    const progress = (normalizedCount - 0.8) / 0.2;
    color = interpolateColor('#f59e0b', '#ea580c', progress);
  }
  
  // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  progressColorCache.set(count, color);
  return color;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Ü–≤–µ—Ç–∞–º–∏
function interpolateColor(color1: string, color2: string, factor: number): string {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º hex –≤ RGB
  const hex1 = color1.replace('#', '');
  const hex2 = color2.replace('#', '');
  
  const r1 = parseInt(hex1.substr(0, 2), 16);
  const g1 = parseInt(hex1.substr(2, 2), 16);
  const b1 = parseInt(hex1.substr(4, 2), 16);
  
  const r2 = parseInt(hex2.substr(0, 2), 16);
  const g2 = parseInt(hex2.substr(2, 2), 16);
  const b2 = parseInt(hex2.substr(4, 2), 16);
  
  // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
  const r = Math.round(r1 + (r2 - r1) * factor);
  const g = Math.round(g1 + (g2 - g1) * factor);
  const b = Math.round(b1 + (b2 - b1) * factor);
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ hex
  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
}

// –ö—ç—à –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≥—Ä—É–ø–ø
const groupAgeCache = new Map<string, number>();
let lastHistoryLength = 0;

export function calculateGroupAge(history: RouletteNumber[], group: number[]): number {
  // –û—á–∏—â–∞–µ–º –∫—ç—à –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
  if (history.length !== lastHistoryLength) {
    groupAgeCache.clear();
    lastHistoryLength = history.length;
  }
  
  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø—ã
  const groupKey = group.sort().join(',');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (groupAgeCache.has(groupKey)) {
    return groupAgeCache.get(groupKey)!;
  }
  
  let groupAge = history.length;
  for (let i = history.length - 1; i >= 0; i--) {
    if (group.includes(history[i] as number)) {
      groupAge = history.length - 1 - i;
      break;
    }
  }
  
  // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  groupAgeCache.set(groupKey, groupAge);
  return groupAge;
}

export function findRepeats(history: RouletteNumber[]): RepeatSeries[] {
  const repeats: RepeatSeries[] = [];
  let i = 0;
  while (i < history.length - 1) {
    let j = i;
    while (j + 1 < history.length && history[j] === history[j + 1]) {
      j++;
    }
    if (j > i) {
      repeats.push({ value: history[i], start: i + 1, length: j - i + 1 });
      i = j + 1;
    } else {
      i++;
    }
  }
  return repeats;
}

export function getRepeatIndexes(history: RouletteNumber[]): Set<number> {
  const repeatIndexes = new Set<number>();
  let i = 0;
  while (i < history.length - 1) {
    let j = i;
    while (j + 1 < history.length && history[j] === history[j + 1]) {
      j++;
    }
    if (j > i) {
      for (let k = i; k <= j; k++) repeatIndexes.add(k);
      i = j + 1;
    } else {
      i++;
    }
  }
  return repeatIndexes;
} 